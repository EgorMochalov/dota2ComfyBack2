// seeders/seed.js
const { sequelize, User, Team, ChatRoom, ChatRoomMember, ChatMessage, TeamApplication, Invitation, UserBlock, Notification } = require('../src/models');
const { hashPassword } = require('../src/utils/password');
const { DataTypes } = require('sequelize');

async function seed() {
  try {
    console.log('Starting database seeding...');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await sequelize.sync({ force: true });
    console.log('Database synced successfully');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.bulkCreate([
      {
        email: 'player1@example.com',
        username: 'CarryPlayer',
        password_hash: await hashPassword('password123'),
        region: 'eu_west',
        game_modes: ['ranked', 'turbo'],
        mmr_rating: 4500,
        preferred_roles: ['carry', 'mid'],
        about_me: 'Professional carry player looking for competitive team',
        tags: ['competitive', 'english', 'tryhard'],
        is_searching: true
      },
      {
        email: 'player2@example.com',
        username: 'SupportMain',
        password_hash: await hashPassword('password123'),
        region: 'eu_west',
        game_modes: ['ranked', 'captains_mode'],
        mmr_rating: 4200,
        preferred_roles: ['support', 'hard_support'],
        about_me: 'Position 4/5 player with good game sense',
        tags: ['friendly', 'english', 'competitive'],
        is_searching: true
      },
      {
        email: 'player3@example.com',
        username: 'MidOrFeed',
        password_hash: await hashPassword('password123'),
        region: 'russia',
        game_modes: ['ranked', 'all_pick'],
        mmr_rating: 5000,
        preferred_roles: ['mid'],
        about_me: 'Mid lane specialist, comfortable with most heroes',
        tags: ['pro', 'russian', 'mid'],
        is_searching: true
      },
      {
        email: 'player4@example.com',
        username: 'OfflaneEnjoyer',
        password_hash: await hashPassword('password123'),
        region: 'eu_east',
        game_modes: ['ranked', 'turbo'],
        mmr_rating: 3800,
        preferred_roles: ['offlane'],
        about_me: 'Offlane player who creates space for the team',
        tags: ['space_creator', 'english'],
        is_searching: true
      },
      {
        email: 'player5@example.com',
        username: 'TeamCaptain',
        password_hash: await hashPassword('password123'),
        region: 'us_west',
        game_modes: ['ranked', 'captains_mode', 'tournament'],
        mmr_rating: 4700,
        preferred_roles: ['carry', 'mid', 'offlane'],
        about_me: 'Experienced team captain looking for dedicated players',
        tags: ['leader', 'english', 'tournaments'],
        is_searching: false
      }
    ]);

    console.log('Created users:', users.length);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const teams = await Team.bulkCreate([
      {
        name: 'Pro Warriors',
        description: 'Professional team competing in tournaments',
        captain_id: users[0].id,
        region: 'eu_west',
        game_modes: ['ranked', 'captains_mode', 'tournament'],
        mmr_range_min: 4000,
        mmr_range_max: 5500,
        required_roles: ['support', 'offlane'],
        tags: ['pro', 'tournaments', 'competitive'],
        is_searching: true,
        looking_for_scrim: true
      },
      {
        name: 'Casual Gamers',
        description: 'Friendly team playing for fun and improvement',
        captain_id: users[4].id,
        region: 'us_west',
        game_modes: ['ranked', 'turbo', 'all_pick'],
        mmr_range_min: 3000,
        mmr_range_max: 4500,
        required_roles: ['carry', 'support'],
        tags: ['friendly', 'improvement', 'casual'],
        is_searching: true,
        looking_for_scrim: false
      }
    ]);

    console.log('Created teams:', teams.length);

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥—ã
    await users[0].update({ team_id: teams[0].id }); // CarryPlayer –≤ Pro Warriors
    await users[1].update({ team_id: teams[0].id }); // SupportMain –≤ Pro Warriors
    await users[4].update({ team_id: teams[1].id }); // TeamCaptain –≤ Casual Gamers

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    const chatRooms = await ChatRoom.bulkCreate([
      {
        type: 'team',
        name: 'Pro Warriors Team Chat',
        team_id: teams[0].id
      },
      {
        type: 'team',
        name: 'Casual Gamers Team Chat',
        team_id: teams[1].id
      },
      {
        type: 'private'
      },
      {
        type: 'private'
      }
    ]);

    console.log('Created chat rooms:', chatRooms.length);

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç—ã
    await ChatRoomMember.bulkCreate([
      // Team chat for Pro Warriors
      { room_id: chatRooms[0].id, user_id: users[0].id },
      { room_id: chatRooms[0].id, user_id: users[1].id },
      
      // Team chat for Casual Gamers
      { room_id: chatRooms[1].id, user_id: users[4].id },
      
      // Private chat between Player1 and Player3
      { room_id: chatRooms[2].id, user_id: users[0].id },
      { room_id: chatRooms[2].id, user_id: users[2].id },
      
      // Private chat between Player2 and Player4
      { room_id: chatRooms[3].id, user_id: users[1].id },
      { room_id: chatRooms[3].id, user_id: users[3].id }
    ]);

    console.log('Created chat room members');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ChatMessage.bulkCreate([
      {
        room_id: chatRooms[0].id,
        user_id: users[0].id,
        message: '–ü—Ä–∏–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞! –ì–æ—Ç–æ–≤—ã –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–µ–≥–æ–¥–Ω—è?',
        message_type: 'text'
      },
      {
        room_id: chatRooms[0].id,
        user_id: users[1].id,
        message: '–î–∞, —è –≥–æ—Ç–æ–≤. –í–æ —Å–∫–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–µ–º—Å—è?',
        message_type: 'text'
      },
      {
        room_id: chatRooms[0].id,
        user_id: users[0].id,
        message: '–î–∞–≤–∞–π—Ç–µ –≤ 20:00 –ø–æ –ú–°–ö',
        message_type: 'text'
      },
      {
        room_id: chatRooms[2].id,
        user_id: users[0].id,
        message: '–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ?',
        message_type: 'text'
      },
      {
        room_id: chatRooms[2].id,
        user_id: users[2].id,
        message: '–ö–æ–Ω–µ—á–Ω–æ! –Ø –∫–∞–∫ —Ä–∞–∑ –∏—â—É —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è —Ä–∞–Ω–∫–µ–¥–∞',
        message_type: 'text'
      }
    ]);

    console.log('Created chat messages');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—ã
    const applications = await TeamApplication.bulkCreate([
      {
        team_id: teams[0].id,
        user_id: users[2].id,
        message: '–•–æ—á—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ. –ò–≥—Ä–∞—é –Ω–∞ –º–∏–¥–µ –Ω–∞ 5–∫ MMR',
        status: 'pending'
      },
      {
        team_id: teams[1].id,
        user_id: users[3].id,
        message: '–ò—â—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∏–≥—Ä—ã',
        status: 'pending'
      }
    ], { returning: true });

    console.log('Created team applications');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const invitations = await Invitation.bulkCreate([
      {
        team_id: teams[0].id,
        invited_user_id: users[3].id,
        inviter_id: users[0].id,
        message: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ñ—Ñ–ª–µ–π–Ω–µ—Ä–∞'
      }
    ], { returning: true });

    console.log('Created invitations');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await UserBlock.create({
      blocker_user_id: users[0].id,
      blocked_user_id: users[4].id
    });

    console.log('Created user blocks');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await Notification.bulkCreate([
      {
        user_id: users[0].id,
        type: 'application',
        title: 'New Team Application',
        message: 'MidOrFeed has applied to join your team Pro Warriors',
        related_entity_type: 'application',
        related_entity_id: applications[0].id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID –∑–∞—è–≤–∫–∏
      },
      {
        user_id: users[2].id,
        type: 'invitation',
        title: 'Team Invitation',
        message: 'You have been invited to join team Pro Warriors',
        related_entity_type: 'invitation',
        related_entity_id: invitations[0].id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      }
    ]);

    console.log('Created notifications');

    console.log('‚úÖ Database seeding completed successfully!');
    console.log('');
    console.log('üìù Test Data Summary:');
    console.log(`üë• Users: ${users.length} (player1@example.com - player5@example.com, password: password123)`);
    console.log(`üèÜ Teams: ${teams.length}`);
    console.log(`üí¨ Chat Rooms: ${chatRooms.length}`);
    console.log(`üì® Applications: 2`);
    console.log(`üì© Invitations: 1`);
    console.log(`üö´ Blocks: 1`);
    console.log('');
    console.log('üöÄ You can now start testing the API!');

  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seed();
}

module.exports = seed;